/** @file game_helper.c
 *
 *  @brief Definitions for game related functions
 *
 *  This file contains all the macros and game required
 *  variables 
 *
 *  @author Ishant Dawer (idawer@andrew.cmu.edu)
 *  @bug No known bugs
 */

#include "game_helper.h"
#include<video_defines.h>
#include<malloc.h>

/*EDIT:To be removed*/
#include<contracts.h>
#include<simics.h>
#include<mt19937int.h>
#include<stdio.h>

#define PANEL_X ((CONSOLE_WIDTH)/2 -10)  /*Column*/
#define PANEL_Y (CONSOLE_HEIGHT)/2  /*ROW*/

#define SPACE 0x20
#define MAX_COLORS 8
#define SHIFT_BY_FOUR 4
#define ERROR -1
#define SEPARATOR 12
#define VAL_SEPARATOR 14
#define TEXT_SEPARATOR 7
#define SIDE_ITEMS 6
#define EQUAL_CHARACTER '='
#define TRUE 1
#define FALSE 0
#define SIXTY_SECONDS 60

/* Default color */
#define DEFAULT_COLOR ((FGND_WHITE)|(BGND_BLACK))


/*Size of the panel*/
uint8_t matrix_len;
uint8_t matrix_wid;
uint8_t num_colors;
/* Panel first and last element coordinates */
uint8_t start_x;
uint8_t start_y;
uint8_t end_x;
uint8_t end_y;

uint8_t pause = TRUE;

/* Timer vars */
unsigned int seconds = 0;
unsigned int timer_ticks = 0;

void wait_char(char ch)
{
	char read; 
	while((read=readchar()) != ch)
	{
		continue;
	}
}

void wait_key_press()
{
	char read = readchar();
	while((read=readchar()) == ERROR)
	{
		continue;
	}
}
/** @brief Tick function, to be called by the timer interrupt handler
 * 
 *  In a real game, this function would perform processing which
 *  should be invoked by timer interrupts.
 *
 **/
void tick(unsigned int numTicks)
{
	timer_ticks = numTicks;
	lprintf("Number_cycles :%d, numtic:%d",NUMBER_CYCLES,numTicks);
    if (numTicks % NUMBER_CYCLES == 0)
    {
		seconds++;
		lprintf("seconds %d\n",seconds);
		/*
		if (!pause) 
		{
			int actual_cursor_row,actual_cursor_col;
			get_cursor(&actual_cursor_row,&actual_cursor_col);
			set_cursor(start_y,end_x + VAL_SEPARATOR);
			printf("%d:%2d",seconds/SIXTY_SECONDS,
					seconds%SIXTY_SECONDS);
			set_cursor(actual_cursor_row,actual_cursor_col);
		}*/
    }
}

/* EDIT: TO be deleted*/
void test_coordinates()
{
	ASSERT(PANEL_X != 12);
    ASSERT(PANEL_Y != 40);
}

void random_generator()
{
	int time1,time2;
	wait_key_press();
	time1 = timer_ticks;
	wait_key_press();
	time2 = timer_ticks;
	/* Generating random seed based on the
	 * time difference */
	sgenrand(time2-time1);
}

uint8_t choose_bg_color(unsigned long random,uint8_t num_colors)
{
	if (num_colors < 4 && num_colors > 8)
		return ERROR;
	uint8_t color_index = (random % num_colors) << SHIFT_BY_FOUR;
	uint8_t output;
	switch (color_index)
	{
		case BGND_BLACK:
			output= BGND_BLACK;
			break;

		case BGND_BLUE:
			output= BGND_BLUE;
			break;

		case BGND_GREEN:
			output= BGND_GREEN;
			break;

		case BGND_CYAN:
			output= BGND_CYAN;
			break;

		case BGND_RED:
			output= BGND_RED;
			break;

		case BGND_MAG:
			output= BGND_MAG;
			break;

		case BGND_BRWN:
			output= BGND_BRWN;
			break;

		case BGND_LGRAY:
			output= BGND_LGRAY;
			break;

		default :
			output = ERROR;
			break;
	}
	return output;
}
void draw_screen_sidebar()
{
	/*Print timer menu*/
	int column = end_x + SEPARATOR,row = start_y;
	int actual_cursor_row,actual_cursor_col;
	int i = 0 ;
	/*Draw equal operator */
	for (;i< SIDE_ITEMS;i++)
	{
		draw_char(row,column,EQUAL_CHARACTER,DEFAULT_COLOR);
		row++;
	}
	
	/*Print time and other parameters */
	get_cursor(&actual_cursor_row,&actual_cursor_col);
	set_cursor(start_y,end_x + TEXT_SEPARATOR);

	printf("time");
	/* Setting the seconds to 0 */
	/*seconds = 0;
	pause = FALSE;*/

	set_cursor(start_y+1,end_x + TEXT_SEPARATOR);
	printf("wasd");

	set_cursor(start_y+1,end_x + VAL_SEPARATOR);
	printf("move");

	set_cursor(start_y+2,end_x + TEXT_SEPARATOR);
	printf("space");

	set_cursor(start_y+2,end_x + VAL_SEPARATOR);
	printf("mark");

	set_cursor(start_y+3,end_x + TEXT_SEPARATOR);
	printf("p");

	set_cursor(start_y+3,end_x + VAL_SEPARATOR);
	printf("pause");

	set_cursor(start_y+4,end_x + TEXT_SEPARATOR);
	printf("h");

	set_cursor(start_y+4,end_x + VAL_SEPARATOR);
	printf("help");

	set_cursor(start_y+5,end_x + TEXT_SEPARATOR);
	printf("q");

	set_cursor(start_y+5,end_x + VAL_SEPARATOR);
	printf("quit");

	set_cursor(actual_cursor_row,actual_cursor_col);
}

void draw_game_panel(uint8_t len, uint8_t width,uint8_t num_colors)
{
	int i,j,block_color,item_index=0;
	unsigned long  random;
	/* Find the center of the matrix*/
	uint8_t matrix_mid_x = (width-1)/DIVIDE_BY_TWO;
	uint8_t matrix_mid_y = (len-1)/DIVIDE_BY_TWO;

	/*Calculate the start element of the matrix */
	start_x  = PANEL_X - matrix_mid_x;
	start_y  = PANEL_Y - matrix_mid_y;
	
	/*Calculate the end coordinates of the panel */	
	end_x = start_x + width + MINUS_ONE;
	end_y = start_y + len + MINUS_ONE;

	/* Generate random numbers */
	/* Seed generation */
	random_generator();
	/* Generate a number */
	for (i = start_x - 1; i <= end_x + 1; i++)
	{
		if ((i == start_x -1) || (i == end_x + 1))
		{
			draw_char(start_y -1,i,'+',DEFAULT_COLOR);
		} else 
		{
			draw_char(start_y -1,i,'-',DEFAULT_COLOR);
		}	
	}
	for	(i=start_y;i <= end_y ; i++) 
	{
	   for (j= start_x-1;j<=end_x+1; j++)
	   {
		   if ((j == start_x -1)||(j==end_x + 1))
		   {
			   draw_char(i,j,'|',DEFAULT_COLOR);	
		   } else 
		   {
			   random = genrand();
			   block_color=choose_bg_color(random,num_colors);
			   game_state_buf[item_index]=block_color;
			   draw_char(i,j,SPACE,FGND_WHITE|block_color);
			   item_index++;
		   }
	   }	   
	}
	for (i = start_x - 1; i <= end_x + 1; i++)
	{
		if ((i == start_x -1) || (i == end_x + 1))
		{
			draw_char(end_y + 1 ,i,'+',DEFAULT_COLOR);
		} else 
		{
			draw_char(end_y + 1,i,'-',DEFAULT_COLOR);
		}	
	}/* set the cursor to the first element */
	/* Draw side bar menu */

	draw_screen_sidebar();

	set_cursor(start_y,start_x);

	show_cursor();
}

int move_up(int row)
{
	/*Show cursor if hidden */
	if ((row - 1) >= start_y)
	{
		row--;
	}
	return row;
}

int move_left(int col)
{
	if ((col - 1) >= start_x)
	{
		col--;
	}
	return col;
}

int move_down(int row)
{
	if ((row + 1) <= end_y)
	{
		row++;
	}
	return row;
}

int move_right(int col)
{
	if ((col + 1) <= end_x)
	{
		col++;
	}
	return col;
}

int get_elem_bg_color(int row,int col)
{
	int elem_index,elem_row,elem_col;
	int color;
    elem_row = row - start_y;
	elem_col = col - start_x;
	elem_index = elem_row * matrix_wid + elem_col;
	color = game_state_buf[elem_index];
	return color;
}	
void update_elem_bg_color(int row,int col,int color)
{
	int elem_index,elem_row,elem_col;
    elem_row = row - start_y;
	elem_col = col - start_x;
	elem_index = elem_row * matrix_wid + elem_col;
	game_state_buf[elem_index] = color;
}

void flood_it(int row,int column,int new_color,int old_color)
{
	/*Get the old color associated with this element */
	int curr_elem_color = get_elem_bg_color(row,column);
	/* Check if new color matches old color */
	if (old_color != curr_elem_color)
		return;
	else 
	{
		/* Update the elem with new color */
		draw_char(row,column,SPACE,FGND_WHITE|new_color);
		update_elem_bg_color(row,column,new_color);
		/*Check if next elem to its right is valid */
		if ((column + 1) <= end_x)
		{
			flood_it(row,column+1,new_color,curr_elem_color);
		}
		/*Check if next elem in down direction is valid */
		if ((row + 1) <= end_y)
		{
			flood_it(row+1,column,new_color,curr_elem_color);
		}
		/*Check if next elem in up dir is valid */
		if ((row - 1) >= start_y)
		{
			flood_it(row-1,column,new_color,curr_elem_color);
		}
		/*Check if next elem to its left is valid */
		if ((column - 1) >= start_x)
		{
			flood_it(row,column-1,new_color,curr_elem_color);
		}
	}
}

void mark(int color)
{
	/*Get the top elements color*/
	int top_elem_color = get_elem_bg_color(start_y,start_x);
	if (top_elem_color != color )
	{
		flood_it(start_y,start_x,color,top_elem_color);
	}
	/* Else no op */
}

void move_cursor(char ch)
{
	show_cursor();
	int row,col;
	get_cursor(&row,&col);
	int color;
	switch (ch)
	{
		case 'w':
			row = move_up(row);
			break;

		case 'a':
			col = move_left(col);
			break;

		case 's':
			row = move_down(row);
			break;
		
		case 'd':
			col = move_right(col);
			break;

		case SPACE:
			color=get_elem_bg_color(row,col);	
			mark(color);
			break;

		case 'h':
			break;

		case 'p':
			break;

		case 'q':
			break;

		default :
			break;
	}
	set_cursor(row,col);
}

void set_dimension_panel(int len,int wid,int color)
{
	matrix_len = len;
	matrix_wid = wid;
	num_colors = color;
}

void game_run()
{
	/* TC 1 */
	test_coordinates();
	clear_console();
	draw_game_panel(matrix_len,matrix_wid,num_colors);
}
